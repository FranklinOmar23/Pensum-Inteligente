trigger:
  branches:
    include:
      - Dev
      - QA
      - Master

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: BuildFrontend
  displayName: 'Build React frontend'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      cd Client
      npm install
      npm run build
    displayName: 'Build frontend'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Client/build'
      artifact: 'frontend-artifact'
      publishLocation: 'pipeline'
    displayName: 'Publish frontend artifact'

- job: BuildBackend
  displayName: 'Build Express backend'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      cd Server
      npm install
      npm run build
    displayName: 'Build backend'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Server/build'
      artifact: 'backend-artifact'
      publishLocation: 'pipeline'
    displayName: 'Publish backend artifact'

- job: RunUnitTests
  displayName: 'Run Unit Tests'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      cd Server
      npm install
      npm test
    displayName: 'Run unit tests'

- job: DeployToQA
  displayName: 'Deploy to QA environment'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/qa'), eq(variables['Build.Reason'], 'IndividualCI'))
  steps:
  # Agrega los pasos necesarios para implementar en tu entorno de QA

- job: DeployToProduction
  displayName: 'Deploy to Production environment'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'IndividualCI'))
  steps:
  # Agrega los pasos necesarios para implementar en tu entorno de producci√≥n
